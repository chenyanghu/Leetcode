There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites
2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]

    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(numCourses == 0)
            return new int[0];
        
        int[] indegree = new int[numCourses];
        int[] order = new int[numCourses];
        int index = 0;
        
        Queue<Integer> queue = new LinkedList<Integer>();
        
        for(int i = 0; i < prerequisites.length; i++){
            indegree[prerequisites[i][0]]++;
        }
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                order[index++] = i;
                queue.offer(i);
            }
        }
        
        while(!queue.isEmpty()){
            int prerequisite = queue.poll();
            for(int i = 0; i < prerequisites.length; i++){
                if(prerequisite == prerequisites[i][1]){
                    indegree[prerequisites[i][0]]--;
                    if(indegree[prerequisites[i][0]] == 0){
                        order[index++] = prerequisites[i][0];
                        queue.offer(prerequisites[i][0]);
                    }
                }
            }
        }
        
        if(index == numCourses)
            return order;
        return new int[0];
    }
