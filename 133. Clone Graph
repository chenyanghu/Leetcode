Description:
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

  First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
  Second node is labeled as 1. Connect node 1 to node 2.
  Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.


Use dfs to solve this problem:

    private HashMap<Integer, UndirectedGraphNode> res = new HashMap<>();
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
       return clone(node);
    }
    
    private UndirectedGraphNode clone(UndirectedGraphNode node){
        if (node == null)
            return null;
        if (res.containsKey(node.label))
            return res.get(node.label);
        UndirectedGraphNode cl = new UndirectedGraphNode(node.label);
        res.put(cl.label,cl);
        for(UndirectedGraphNode temp : node.neighbors){
            cl.neighbors.add(clone(temp));
        }
        return cl;
    }
