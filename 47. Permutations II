Given a collection of numbers that might contain duplicates, return all possible unique permutations.
For example,
[1,1,2] have the following unique permutations    
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]  
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        if(nums.length == 0 || nums == null) return res;
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        helper(res, temp, used, nums);
        return res;
    }
    
    private void helper(List<List<Integer>> res, List<Integer> temp, boolean[] used, int[] nums){
        if(temp.size() == nums.length){ 
            res.add(new ArrayList<Integer>(temp));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(used[i]) continue;
            if(i > 0 && nums[i - 1] == nums[i] && !used[i-1]) continue;
            used[i] = true;
            temp.add(nums[i]);
            helper(res, temp, used, nums);
            used[i] = false;
            temp.remove(temp.size() - 1);
        }
    }
