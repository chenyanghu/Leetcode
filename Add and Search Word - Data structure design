
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)

search(word) can search a literal word or a regular expression string containing only letters a-z 
or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true

class WordDictionary {
    Map<Integer, List<String>> dir = new HashMap<Integer, List<String>>();
    /** Initialize your data structure here. */
    public WordDictionary() {
       
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        int index = word.length();
        if(!dir.containsKey(index)){
            List<String> ls = new ArrayList<String>();
            ls.add(word);
            dir.put(index, ls);
        }
        else{
            dir.get(index).add(word);
        }
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        int index = word.length();
        if(!dir.containsKey(index)){
            return false;
        }
        else{
            for(String s : dir.get(index))
                if(match(s, word))
                    return true;
            }
        return false;
    }
    
    private boolean match(String old, String obj){
        for(int i = 0; i < obj.length(); i++){
            if(obj.charAt(i) != '.' && obj.charAt(i) != old.charAt(i))
                return false;
        }
        return true;
    }
}
